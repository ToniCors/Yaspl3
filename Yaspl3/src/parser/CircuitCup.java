
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import astNodes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CircuitCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CircuitSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CircuitCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CircuitCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CircuitCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\016\004" +
    "\000\002\016\002\000\002\004\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\005\006\000\002\005\004\000\002\007" +
    "\004\000\002\007\002\000\002\010\005\000\002\010\003" +
    "\000\002\011\010\000\002\011\007\000\002\012\004\000" +
    "\002\012\002\000\002\013\007\000\002\013\005\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\006\000\002\017\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\007\000\002\017\006\000\002\017\012\000" +
    "\002\017\010\000\002\017\010\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\021\005\000\002\022" +
    "\002\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\004\000\002\022" +
    "\004\000\002\022\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\004\005\001\002\000\004\002\201\001" +
    "\002\000\020\005\ufffd\006\014\031\006\032\007\033\011" +
    "\034\010\035\017\001\002\000\004\060\ufff9\001\002\000" +
    "\004\060\ufff8\001\002\000\004\060\ufff6\001\002\000\004" +
    "\060\ufff7\001\002\000\020\005\ufffd\006\014\031\006\032" +
    "\007\033\011\034\010\035\017\001\002\000\004\060\170" +
    "\001\002\000\004\060\143\001\002\000\004\005\021\001" +
    "\002\000\020\005\ufffd\006\014\031\006\032\007\033\011" +
    "\034\010\035\017\001\002\000\004\060\ufff5\001\002\000" +
    "\004\005\uffff\001\002\000\064\002\ufffb\012\026\013\033" +
    "\015\uffd8\017\uffd8\020\027\024\032\026\023\036\uffd8\037" +
    "\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042\056" +
    "\025\057\037\060\036\001\002\000\062\012\026\013\033" +
    "\015\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8\037" +
    "\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042\056" +
    "\025\057\037\060\057\001\002\000\004\020\135\001\002" +
    "\000\040\015\uffc6\016\uffc6\017\uffc6\021\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\052\uffc6\053\uffc6\001\002\000\040\015\uffc3\016" +
    "\uffc3\017\uffc3\021\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\052\uffc3\053" +
    "\uffc3\001\002\000\040\015\uffc9\016\uffc9\017\uffc9\021\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\052\uffc9\053\uffc9\001\002\000\054" +
    "\012\026\013\033\020\027\021\uffd8\036\uffd8\037\022\040" +
    "\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\040\052\uffd8\053\uffd8\054\024\055\042\056\025\057" +
    "\037\060\057\001\002\000\066\002\ufffb\012\026\013\033" +
    "\015\uffd8\017\uffd8\020\027\023\ufffb\024\032\026\023\036" +
    "\uffd8\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055" +
    "\042\056\025\057\037\060\036\001\002\000\004\002\001" +
    "\001\002\000\004\020\120\001\002\000\040\015\uffc8\016" +
    "\uffc8\017\uffc8\021\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\052\uffc8\053" +
    "\uffc8\001\002\000\004\015\116\001\002\000\004\014\114" +
    "\001\002\000\042\014\uffef\015\uffc7\017\100\020\101\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\102\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\052\uffc7\053\uffc7\001\002\000" +
    "\040\015\uffc4\016\uffc4\017\uffc4\021\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\052\uffc4\053\uffc4\001\002\000\062\012\026\013\033" +
    "\015\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8\037" +
    "\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042\056" +
    "\025\057\037\060\057\001\002\000\036\015\uffda\017\053" +
    "\021\uffda\036\047\037\044\040\054\041\051\044\052\045" +
    "\045\046\055\047\050\050\046\052\043\053\056\001\002" +
    "\000\040\015\uffc5\016\uffc5\017\uffc5\021\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\052\uffc5\053\uffc5\001\002\000\062\012\026\013" +
    "\033\015\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8" +
    "\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042" +
    "\056\025\057\037\060\057\001\002\000\062\012\026\013" +
    "\033\015\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8" +
    "\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042" +
    "\056\025\057\037\060\057\001\002\000\062\012\026\013" +
    "\033\015\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8" +
    "\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042" +
    "\056\025\057\037\060\057\001\002\000\062\012\026\013" +
    "\033\015\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8" +
    "\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042" +
    "\056\025\057\037\060\057\001\002\000\062\012\026\013" +
    "\033\015\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8" +
    "\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042" +
    "\056\025\057\037\060\057\001\002\000\062\012\026\013" +
    "\033\015\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8" +
    "\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042" +
    "\056\025\057\037\060\057\001\002\000\062\012\026\013" +
    "\033\015\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8" +
    "\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042" +
    "\056\025\057\037\060\057\001\002\000\062\012\026\013" +
    "\033\015\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8" +
    "\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042" +
    "\056\025\057\037\060\057\001\002\000\060\012\026\013" +
    "\033\015\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8\037\022" +
    "\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042\056\025" +
    "\057\037\060\064\001\002\000\062\012\026\013\033\015" +
    "\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8\037\022" +
    "\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042\056\025" +
    "\057\037\060\057\001\002\000\062\012\026\013\033\015" +
    "\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8\037\022" +
    "\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042\056\025" +
    "\057\037\060\057\001\002\000\062\012\026\013\033\015" +
    "\uffd8\016\uffd8\017\uffd8\020\027\021\uffd8\036\uffd8\037\022" +
    "\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042\056\025" +
    "\057\037\060\057\001\002\000\040\015\uffc7\016\uffc7\017" +
    "\uffc7\021\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\052\uffc7\053\uffc7\001" +
    "\002\000\040\015\uffce\016\uffce\017\uffce\021\uffce\036\047" +
    "\037\044\040\054\041\051\044\052\045\045\046\055\047" +
    "\050\050\046\052\043\053\uffce\001\002\000\040\015\uffd5" +
    "\016\uffd5\017\uffd5\021\uffd5\036\047\037\044\040\054\041" +
    "\051\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5" +
    "\053\uffd5\001\002\000\040\015\uffcf\016\uffcf\017\uffcf\021" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\052\uffcf\053\uffcf\001\002\000" +
    "\006\015\uffdc\021\uffdc\001\002\000\036\015\uffc7\017\065" +
    "\021\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\052\uffc7\053\uffc7\001\002" +
    "\000\060\012\026\013\033\015\uffd8\017\uffd8\020\027\021" +
    "\uffd8\036\uffd8\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054" +
    "\024\055\042\056\025\057\037\060\064\001\002\000\006" +
    "\015\uffdb\021\uffdb\001\002\000\040\015\uffd7\016\uffd7\017" +
    "\uffd7\021\uffd7\036\047\037\044\040\054\041\051\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7\053\uffd7\001" +
    "\002\000\040\015\uffd0\016\uffd0\017\uffd0\021\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\052\uffd0\053\uffd0\001\002\000\040\015\uffd4" +
    "\016\uffd4\017\uffd4\021\uffd4\036\047\037\044\040\054\041" +
    "\051\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4" +
    "\053\uffd4\001\002\000\040\015\uffd2\016\uffd2\017\uffd2\021" +
    "\uffd2\036\uffd2\037\uffd2\040\054\041\051\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\001\002\000" +
    "\040\015\uffd3\016\uffd3\017\uffd3\021\uffd3\036\047\037\044" +
    "\040\054\041\051\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\052\uffd3\053\uffd3\001\002\000\040\015\uffd6\016\uffd6" +
    "\017\uffd6\021\uffd6\036\047\037\044\040\054\041\051\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6\053\uffd6" +
    "\001\002\000\040\015\uffd1\016\uffd1\017\uffd1\021\uffd1\036" +
    "\uffd1\037\uffd1\040\054\041\051\044\uffd1\045\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\052\uffd1\053\uffd1\001\002\000\040\015" +
    "\uffcd\016\uffcd\017\uffcd\021\uffcd\036\047\037\044\040\054" +
    "\041\051\044\052\045\045\046\055\047\050\050\046\052" +
    "\uffcd\053\uffcd\001\002\000\040\015\uffcb\016\uffcb\017\uffcb" +
    "\021\uffcb\036\047\037\044\040\054\041\051\044\052\045" +
    "\045\046\055\047\050\050\046\052\uffcb\053\uffcb\001\002" +
    "\000\056\012\026\013\033\015\uffd8\017\uffd8\020\027\036" +
    "\uffd8\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055" +
    "\042\056\025\057\037\060\113\001\002\000\056\012\026" +
    "\013\033\017\uffd8\020\027\021\106\036\uffd8\037\022\040" +
    "\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\040\052\uffd8\053\uffd8\054\024\055\042\056\025\057" +
    "\037\060\064\001\002\000\054\012\026\013\033\016\uffd8" +
    "\020\027\036\uffd8\037\022\040\uffd8\041\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8" +
    "\054\024\055\042\056\025\057\037\060\057\001\002\000" +
    "\032\016\104\036\047\037\044\040\054\041\051\044\052" +
    "\045\045\046\055\047\050\050\046\052\043\053\056\001" +
    "\002\000\066\002\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2" +
    "\020\uffe2\023\uffe2\024\uffe2\026\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\001\002\000\004\021\110\001\002\000\004" +
    "\016\107\001\002\000\066\002\uffe0\012\uffe0\013\uffe0\015" +
    "\uffe0\017\uffe0\020\uffe0\023\uffe0\024\uffe0\026\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\001\002\000\004\016\111\001" +
    "\002\000\066\002\uffe1\012\uffe1\013\uffe1\015\uffe1\017\uffe1" +
    "\020\uffe1\023\uffe1\024\uffe1\026\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\001\002\000\004\014\ufff0\001\002\000\036" +
    "\014\uffef\015\uffc7\017\100\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\052\uffc7" +
    "\053\uffc7\001\002\000\004\016\115\001\002\000\066\002" +
    "\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\023\uffe4" +
    "\024\uffe4\026\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\001" +
    "\002\000\004\016\117\001\002\000\066\002\uffe3\012\uffe3" +
    "\013\uffe3\015\uffe3\017\uffe3\020\uffe3\023\uffe3\024\uffe3\026" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\001\002\000\054" +
    "\012\026\013\033\020\027\021\uffd8\036\uffd8\037\022\040" +
    "\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\040\052\uffd8\053\uffd8\054\024\055\042\056\025\057" +
    "\037\060\057\001\002\000\032\021\122\036\047\037\044" +
    "\040\054\041\051\044\052\045\045\046\055\047\050\050" +
    "\046\052\043\053\056\001\002\000\004\025\123\001\002" +
    "\000\004\022\124\001\002\000\064\012\026\013\033\015" +
    "\uffd8\017\uffd8\020\027\023\ufffb\024\032\026\023\036\uffd8" +
    "\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042" +
    "\056\025\057\037\060\036\001\002\000\070\002\uffde\012" +
    "\uffde\013\uffde\015\uffde\017\uffde\020\uffde\023\uffde\024\uffde" +
    "\026\uffde\030\126\036\uffde\037\uffde\040\uffde\041\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\001" +
    "\002\000\004\022\124\001\002\000\066\002\uffdf\012\uffdf" +
    "\013\uffdf\015\uffdf\017\uffdf\020\uffdf\023\uffdf\024\uffdf\026" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\001\002\000\004" +
    "\023\131\001\002\000\070\002\uffd9\012\uffd9\013\uffd9\015" +
    "\uffd9\017\uffd9\020\uffd9\023\uffd9\024\uffd9\026\uffd9\030\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\001\002\000\006\002" +
    "\ufffc\023\ufffc\001\002\000\032\021\134\036\047\037\044" +
    "\040\054\041\051\044\052\045\045\046\055\047\050\050" +
    "\046\052\043\053\056\001\002\000\040\015\uffca\016\uffca" +
    "\017\uffca\021\uffca\036\uffca\037\uffca\040\uffca\041\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\052\uffca\053\uffca" +
    "\001\002\000\054\012\026\013\033\020\027\021\uffd8\036" +
    "\uffd8\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055" +
    "\042\056\025\057\037\060\057\001\002\000\032\021\137" +
    "\036\047\037\044\040\054\041\051\044\052\045\045\046" +
    "\055\047\050\050\046\052\043\053\056\001\002\000\004" +
    "\027\140\001\002\000\004\022\124\001\002\000\066\002" +
    "\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\023\uffdd" +
    "\024\uffdd\026\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\001" +
    "\002\000\040\015\uffcc\016\uffcc\017\uffcc\021\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\052\uffcc\053\uffcc\001\002\000\004\020\144" +
    "\001\002\000\012\007\146\010\145\011\151\021\152\001" +
    "\002\000\014\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\001\002\000\014\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\001\002\000\014\031\006\032\007\033\011\034\010" +
    "\035\017\001\002\000\004\021\162\001\002\000\014\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\001\002\000\004" +
    "\022\154\001\002\000\020\005\uffed\006\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\001\002\000\076\012\uffeb" +
    "\013\uffeb\015\uffeb\017\uffeb\020\uffeb\023\uffeb\024\uffeb\026" +
    "\uffeb\031\006\032\007\033\011\034\010\035\017\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\001\002\000\064\012\026\013" +
    "\033\015\uffd8\017\uffd8\020\027\023\ufffb\024\032\026\023" +
    "\036\uffd8\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024" +
    "\055\042\056\025\057\037\060\036\001\002\000\076\012" +
    "\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb\023\uffeb\024\uffeb" +
    "\026\uffeb\031\006\032\007\033\011\034\010\035\017\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\001\002\000\064\012\uffec" +
    "\013\uffec\015\uffec\017\uffec\020\uffec\023\uffec\024\uffec\026" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\060\uffec\001\002\000\004" +
    "\023\161\001\002\000\020\005\uffe5\006\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000\004\022\154" +
    "\001\002\000\020\005\uffee\006\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\001\002\000\004\060\165\001\002" +
    "\000\006\017\166\021\uffe9\001\002\000\010\007\146\010" +
    "\145\011\151\001\002\000\004\021\uffea\001\002\000\010" +
    "\016\ufff1\017\ufff1\042\174\001\002\000\004\016\172\001" +
    "\002\000\102\005\ufffa\006\ufffa\012\ufffa\013\ufffa\015\ufffa" +
    "\017\ufffa\020\ufffa\023\ufffa\024\ufffa\026\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\001\002\000\006\016\ufff3\017\176\001\002\000" +
    "\056\012\026\013\033\016\uffd8\017\uffd8\020\027\036\uffd8" +
    "\037\022\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\040\052\uffd8\053\uffd8\054\024\055\042" +
    "\056\025\057\037\060\057\001\002\000\034\016\ufff2\017" +
    "\ufff2\036\047\037\044\040\054\041\051\044\052\045\045" +
    "\046\055\047\050\050\046\052\043\053\056\001\002\000" +
    "\004\060\170\001\002\000\004\016\ufff4\001\002\000\004" +
    "\005\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\014\004\015\006\012\011\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\177\004\015\006\012\011\011\001\001" +
    "\000\004\005\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\017\004\015\006\012\011\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\034\016" +
    "\030\017\027\020\033\022\040\001\001\000\004\022\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\132\001\001\000\014" +
    "\010\034\016\131\017\027\020\033\022\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\075\001\001\000\004\022\074\001" +
    "\001\000\004\022\073\001\001\000\004\022\072\001\001" +
    "\000\004\022\071\001\001\000\004\022\070\001\001\000" +
    "\004\022\067\001\001\000\004\022\066\001\001\000\006" +
    "\020\062\022\040\001\001\000\004\022\061\001\001\000" +
    "\004\022\060\001\001\000\004\022\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\065" +
    "\022\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\111\020\065\022\040" +
    "\001\001\000\006\020\104\022\040\001\001\000\004\022" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\124\001\001\000\014\010" +
    "\034\016\127\017\027\020\033\022\040\001\001\000\002" +
    "\001\001\000\004\021\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\147\014\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\152\001\001\000\002\001\001" +
    "\000\010\004\155\006\012\012\154\001\001\000\014\010" +
    "\034\016\157\017\027\020\033\022\040\001\001\000\010" +
    "\004\155\006\012\012\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\166\014\146\001\001\000\002\001\001\000\004" +
    "\007\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\174\001\001\000\002\001\001" +
    "\000\004\005\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CircuitCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CircuitCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CircuitCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
 
  @Override
  public void syntax_error(java_cup.runtime.Symbol s){
		super.syntax_error(s);
      System.out.println("compiler has detected a syntax error at line " + (s.left +1)
          + " column " + (s.right+1)+ " by token: "+s.value+" symID: "+s.sym);

  	try {
  		System.out.println("carattere successivo : "+super.scan().value);
  	} catch (Exception e) {
  		// TODO Auto-generated catch block
  		e.printStackTrace();
  	}
   
  }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CircuitCup$actions {
  private final CircuitCup parser;

  /** Constructor */
  CUP$CircuitCup$actions(CircuitCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CircuitCup$do_action_part00000000(
    int                        CUP$CircuitCup$act_num,
    java_cup.runtime.lr_parser CUP$CircuitCup$parser,
    java.util.Stack            CUP$CircuitCup$stack,
    int                        CUP$CircuitCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CircuitCup$result;

      /* select the action based on the action number */
      switch (CUP$CircuitCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programma ::= HEAD decls START statements 
            {
              ProgramOP RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		ArrayList<Decls> ds = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		ArrayList<Statment> st = (ArrayList<Statment>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT= new ProgramOP(ds,st);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("programma",0, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		ProgramOP start_val = (ProgramOP)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		RESULT = start_val;
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CircuitCup$parser.done_parsing();
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decls ::= var_decl decls 
            {
              ArrayList<Decls> RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		VarDecelOP vd = (VarDecelOP)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		ArrayList<Decls> decs = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		decs.add(0,vd); RESULT = decs;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decls ::= def_decl decls 
            {
              ArrayList<Decls> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		ProcDecelOP dd = (ProcDecelOP)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		ArrayList<Decls> decs = (ArrayList<Decls>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		decs.add(0,dd); RESULT = decs; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= 
            {
              ArrayList<Decls> RESULT =null;
		 RESULT =new ArrayList<Decls>(); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= stat statements 
            {
              ArrayList<Statment> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		Statment s = (Statment)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		ArrayList<Statment> ss = (ArrayList<Statment>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 ss.add(0,s); RESULT = ss ;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= 
            {
              ArrayList<Statment> RESULT =null;
		 RESULT =new ArrayList<Statment>();  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("statements",12, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_decl ::= type var_decls_init SEMI 
            {
              VarDecelOP RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int vadileft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int vadiright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		ArrayList<VarInitOP> vadi = (ArrayList<VarInitOP>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		 RESULT = new VarDecelOP(ty,vadi) ; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("var_decl",2, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT 
            {
              String RESULT =null;
		 RESULT =TypeChecker.INT; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= BOOL 
            {
              String RESULT =null;
		 RESULT =TypeChecker.BOOLE; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= DOUBLE 
            {
              String RESULT =null;
		RESULT =TypeChecker.DOUBLE;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= STRING 
            {
              String RESULT =null;
		RESULT =TypeChecker.STRING;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= CHAR 
            {
              String RESULT =null;
		 RESULT =TypeChecker.CHAR; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_decls_init ::= ID var_init_value COMMA var_decls_init 
            {
              ArrayList<VarInitOP> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).value;
		int vivleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int vivright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr viv = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int vdileft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int vdiright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		ArrayList<VarInitOP> vdi = (ArrayList<VarInitOP>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 vdi.add(0,new  VarInitOP (new Identifier(id), viv)); RESULT =vdi; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("var_decls_init",3, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_decls_init ::= ID var_init_value 
            {
              ArrayList<VarInitOP> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		int vivleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int vivright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr viv = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		RESULT = new ArrayList<VarInitOP>() {{ add(new VarInitOP(new Identifier(id), viv));}}; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("var_decls_init",3, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_init_value ::= ASSIGN expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT =e1; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("var_init_value",5, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_init_value ::= 
            {
              Expr RESULT =null;
		RESULT =null;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("var_init_value",5, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vars ::= ID COMMA vars 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		ArrayList<Identifier> vs = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		vs.add(0,new Identifier(id));RESULT =vs; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("vars",6, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vars ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new ArrayList<Identifier>() {{ add(new Identifier(id));}}; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("vars",6, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_decl ::= DEF ID LPAR par_decls RPAR body 
            {
              ProcDecelOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		ArrayList<ParOP> pds = (ArrayList<ParOP>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		RESULT =new ProcDecelOP(new Identifier(id), pds, b);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("def_decl",7, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-5)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_decl ::= DEF ID LPAR RPAR body 
            {
              ProcDecelOP RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		BodyOP b = (BodyOP)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		RESULT =new ProcDecelOP(new Identifier(id), new ArrayList<ParOP>(), b);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("def_decl",7, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_decls ::= var_decl var_decls 
            {
              ArrayList<VarDecelOP> RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		VarDecelOP vd = (VarDecelOP)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		ArrayList<VarDecelOP> vds = (ArrayList<VarDecelOP>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		vds.add(0,vd); RESULT = vds; 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("var_decls",8, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_decls ::= 
            {
              ArrayList<VarDecelOP> RESULT =null;
		 RESULT =new ArrayList<VarDecelOP>(); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("var_decls",8, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // par_decls ::= par_type type ID COMMA par_decls 
            {
              ArrayList<ParOP> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		ArrayList<ParOP> pds = (ArrayList<ParOP>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 pds.add(0, new ParOP(pt,t,new Identifier(id))); RESULT =pds;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("par_decls",9, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // par_decls ::= par_type type ID 
            {
              ArrayList<ParOP> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		  RESULT = new ArrayList<ParOP>() {{ add(new ParOP(pt,t,new Identifier(id)));}};
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("par_decls",9, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // par_type ::= IN 
            {
              String RESULT =null;
		 RESULT =TypeChecker.IN;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("par_type",10, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // par_type ::= OUT 
            {
              String RESULT =null;
		 RESULT =TypeChecker.OUT;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("par_type",10, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // par_type ::= INOUT 
            {
              String RESULT =null;
		 RESULT =TypeChecker.INOUT;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("par_type",10, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // body ::= LGPAR var_decls statements RGPAR 
            {
              BodyOP RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		ArrayList<VarDecelOP> vd = (ArrayList<VarDecelOP>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		ArrayList<Statment> s = (ArrayList<Statment>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		 RESULT =new BodyOP(vd,s); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("body",11, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stat ::= vars READ SEMI 
            {
              Statment RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		ArrayList<Identifier> v = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		 RESULT = new ReadOP(v); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("stat",13, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stat ::= args WRITE SEMI 
            {
              Statment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		ArrayList<Expr> a = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		 RESULT = new WriteOP(a); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("stat",13, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stat ::= ID ASSIGN expr SEMI 
            {
              Statment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		 RESULT = new AssignOP(new Identifier(id),e);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("stat",13, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stat ::= ID LPAR args RPAR SEMI 
            {
              Statment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		ArrayList<Expr> a = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		 RESULT =  new CallOP(new Identifier(id), a);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("stat",13, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-4)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stat ::= ID LPAR RPAR SEMI 
            {
              Statment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).value;
		 RESULT = new CallOP(new Identifier(id), new ArrayList<Expr>());  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("stat",13, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stat ::= IF LPAR expr RPAR THEN comp_stat ELSE comp_stat 
            {
              Statment RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-5)).value;
		int cs1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int cs1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		CompStatOP cs1 = (CompStatOP)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int cs2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int cs2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		CompStatOP cs2 = (CompStatOP)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new IfThenElseOp(e, cs1, cs2);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("stat",13, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-7)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stat ::= IF LPAR expr RPAR THEN comp_stat 
            {
              Statment RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).value;
		int cs1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int cs1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		CompStatOP cs1 = (CompStatOP)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT =new IfThenOp(e, cs1);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("stat",13, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-5)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stat ::= WHILE LPAR expr RPAR DO comp_stat 
            {
              Statment RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-3)).value;
		int cs1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int cs1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		CompStatOP cs1 = (CompStatOP)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT =new  WhileOP(e, cs1); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("stat",13, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-5)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // args ::= expr COMMA args 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		ArrayList<Expr> a = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 a.add(0,e);  RESULT =a;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // args ::= ID COMMA args 
            {
              ArrayList<Expr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		ArrayList<Expr> a = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 a.add(0,new Identifier(id));  RESULT =a;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // args ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new ArrayList<Expr>() {{ add(e);}};  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comp_stat ::= LGPAR statements RGPAR 
            {
              CompStatOP RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		ArrayList<Statment> s = (ArrayList<Statment>)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		RESULT= new CompStatOP(s); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("comp_stat",15, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= 
            {
              Expr RESULT =null;

              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr GT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new GtOP(e1,e2); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr GE expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new GeOP(e1,e2); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new LtOP(e1,e2); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr LE expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new LeOP(e1,e2); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new EqOP(e1,e2); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new AddOP(e1,e2); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new DiffOP(e1,e2); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new DivOP(e1,e2);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		RESULT = new MulOP(e1,e2);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		RESULT = new OrOP(e1,e2); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new AndOP(e1,e2); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new UminusOP(e);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new NotOP(e);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= LPAR expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-1)).value;
		 RESULT = e;  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.elementAt(CUP$CircuitCup$top-2)), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT =new BooleanConst(true);    
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanConst(false);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT =new Identifier(id);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= INT_CONST 
            {
              Expr RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		String intConst = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		RESULT =new IntConst(Integer.parseInt(intConst));  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= DOUBLE_CONST 
            {
              Expr RESULT =null;
		int doubleConstleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int doubleConstright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		String doubleConst = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new DoubleConst(Double.parseDouble(doubleConst));  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= CHAR_CONST 
            {
              Expr RESULT =null;
		int cConstleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int cConstright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		String cConst = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new CharConst(cConst);  
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$CircuitCup$stack.peek()).value;
		 RESULT = new StringConst(stringConst); 
              CUP$CircuitCup$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CircuitCup$stack.peek()), RESULT);
            }
          return CUP$CircuitCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CircuitCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CircuitCup$do_action(
    int                        CUP$CircuitCup$act_num,
    java_cup.runtime.lr_parser CUP$CircuitCup$parser,
    java.util.Stack            CUP$CircuitCup$stack,
    int                        CUP$CircuitCup$top)
    throws java.lang.Exception
    {
              return CUP$CircuitCup$do_action_part00000000(
                               CUP$CircuitCup$act_num,
                               CUP$CircuitCup$parser,
                               CUP$CircuitCup$stack,
                               CUP$CircuitCup$top);
    }
}

}
